services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: crm-postgres
    environment:
      POSTGRES_DB: fieldservicecrm
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${DB_PASSWORD:-dev_password_123}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/migrations:/docker-entrypoint-initdb.d:ro
    ports:
      - "5432:5432"
    networks:
      - crm-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d fieldservicecrm"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: crm-redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-dev_redis_123}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - crm-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
      target: development
    container_name: crm-backend
    environment:
      NODE_ENV: development
      PORT: 3001
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: fieldservicecrm
      DB_USER: postgres
      DB_PASSWORD: ${DB_PASSWORD:-dev_password_123}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-dev_redis_123}
      JWT_SECRET: ${JWT_SECRET:-dev_jwt_secret_key_for_development_only}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID:-}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY:-}
      AWS_REGION: ${AWS_REGION:-us-east-1}
      S3_BUCKET_NAME: ${S3_BUCKET_NAME:-dev-bucket}
      COGNITO_USER_POOL_ID: ${COGNITO_USER_POOL_ID:-}
      COGNITO_CLIENT_ID: ${COGNITO_CLIENT_ID:-}
      # Development specific settings
      LOG_LEVEL: debug
      CORS_ORIGIN: http://localhost:3000
    volumes:
      - ./backend/src:/app/src:ro
      - ./backend/scripts:/app/scripts:ro
      - ./backend/migrations:/app/migrations:ro
      - ./backend/package.json:/app/package.json:ro
      - ./backend/package-lock.json:/app/package-lock.json:ro
      - backend_node_modules:/app/node_modules
      - ./backend/logs:/app/logs
    ports:
      - "3001:3001"
      - "9229:9229" # Node.js debugger port
    networks:
      - crm-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  # Frontend React App
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
      target: development
    container_name: crm-frontend
    environment:
      REACT_APP_API_BASE_URL: http://localhost:3001
      REACT_APP_AWS_REGION: ${AWS_REGION:-us-east-1}
      REACT_APP_COGNITO_USER_POOL_ID: ${COGNITO_USER_POOL_ID:-}
      REACT_APP_COGNITO_CLIENT_ID: ${COGNITO_CLIENT_ID:-}
      # Development specific
      CHOKIDAR_USEPOLLING: true
      WATCHPACK_POLLING: true
      FAST_REFRESH: true
    volumes:
      - ./frontend/src:/app/src:ro
      - ./frontend/public:/app/public:ro
      - ./frontend/package.json:/app/package.json:ro
      - ./frontend/package-lock.json:/app/package-lock.json:ro
      - ./frontend/tsconfig.json:/app/tsconfig.json:ro
      - ./frontend/craco.config.js:/app/craco.config.js:ro
      - frontend_node_modules:/app/node_modules
    ports:
      - "3000:3000"
    networks:
      - crm-network
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped

  # MinIO (S3-compatible storage for local development)
  minio:
    image: minio/minio:latest
    container_name: crm-minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-minioadmin123}
    volumes:
      - minio_data:/data
    ports:
      - "9000:9000"  # API port
      - "9001:9001"  # Console port
    networks:
      - crm-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # MailHog (Email testing)
  mailhog:
    image: mailhog/mailhog:latest
    container_name: crm-mailhog
    ports:
      - "1025:1025" # SMTP port
      - "8025:8025" # Web UI port
    networks:
      - crm-network

  # Adminer (Database management)
  adminer:
    image: adminer:latest
    container_name: crm-adminer
    environment:
      ADMINER_DEFAULT_SERVER: postgres
      ADMINER_DESIGN: modern
    ports:
      - "8080:8080"
    networks:
      - crm-network
    depends_on:
      - postgres

  # Nginx (Development reverse proxy - optional)
  nginx:
    build:
      context: ./infrastructure/docker/nginx
      dockerfile: Dockerfile.dev
    container_name: crm-nginx
    volumes:
      - ./infrastructure/docker/nginx/dev.conf:/etc/nginx/conf.d/default.conf:ro
    ports:
      - "80:80"
    networks:
      - crm-network
    depends_on:
      - frontend
      - backend
    profiles:
      - nginx

networks:
  crm-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  minio_data:
    driver: local
  backend_node_modules:
    driver: local
  frontend_node_modules:
    driver: local